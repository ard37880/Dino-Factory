# Ruby/ The Ruby Bot
# Made by: Andrew Davis
# 01/25/2024
'''   
Any code not in use comment out like this so we can save it for reactivation per server
'''   

############# Imports ###############################################################
import discord
import requests
import nacl
import asyncio
import traceback
import asyncio
import logging
import re
import json

from discord.ext import commands
from discord import FFmpegPCMAudio
from discord import PCMVolumeTransformer
from apikeys import discord_bot_token
from discord.ext import commands
from words import bw
from discord import Member
from discord.ext.commands import has_permissions, MissingPermissions

############# Intendts #############################################################
intents = intents = discord.Intents(value=8)
intents.members = True
intents.messages = True
intents.guilds = True
intents.message_content = True

############ Trigger ###############################################################
client = commands.Bot(command_prefix="!", intents=intents)
bot = commands.Bot(command_prefix="!", intents=intents)

# When Start up Bot
@client.event
async def on_ready():
    print("Ruby is ready for use!")
    print("-------------------------------------------------")

############ Commands #############################################################
# Hello when prompt 
@client.command()
async def hello(ctx):
    await ctx.send(f'Hello {ctx.author.name}, Im reached Ruby. Nice to meet you!')

# Goodbye when prompt
@client.command()
async def goodbye(ctx):
    await ctx.send(f'Goodbye {ctx.author.name}, hope you have a great rest of your day!')

# Kicks Member
@client.command()
@has_permissions(kick_members=True)
async def kick(ctx, member: discord.Member, *, reson=None):
    await member.kick(reason=reason)
    await ctx.send(f'User {member} has been kicked.')

@kick.error
async def kick_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("You don't have permission to kick people!")

# Bans Member
@client.command()
@has_permissions(ban_members=True)
async def kick(ctx, member: discord.Member, *, reson=None):
    await member.ban(reason=reason)
    await ctx.send(f'User {member} has been banned.')

@kick.error
async def ban_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("You don't have permission to ban people!")

############### Events ##############################################################

# Prints in terminal when ready for use
@client.event
async def on_ready():
    print("Ruby is ready for use!")
    print("-------------------------------------------------")

# Welcomes user to server in Welcome Channel
   
@client.event
async def on_member_join(member):
    channel = client.get_channel(1198457414207426642)
    await channel.send(f'Welcome to the server {member}! Please read the rules and we will see you around!')

# Profanity Checker
profanity_list = bw

@client.event
async def on_message(message):
    # Skip if the message is from the bot itself
    if message.author == client.user:
        return

    # Check for profanity in the message
    if any(re.search(r"\b" + re.escape(word) + r"\b", message.content.lower()) for word in profanity_list):
        await message.delete()
        await message.channel.send("Message was deleted for community safety.")

    # Important: process commands if no profanity is found
    await client.process_commands(message)


################ Logging #############################################################

logger = logging.getLogger('discord')
logger.setLevel(logging.DEBUG)
handler = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')
handler.setFormatter(logging.Formatter('%(asctime)s:%(levelname)s:%(name)s: %(message)s'))
logger.addHandler(handler)



############# Bot Token ##############################################################
client.run(discord_bot_token)
############# END#####################################################################
