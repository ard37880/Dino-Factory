# Ruby/ The Ruby Bot
# Made by: Andrew Davis
# 01/25/2024
'''   
Any code not in use comment out like this so we can save it for reactivation per server
'''   

############# Imports ###############################################################
import nextcord
import requests
import nacl
import asyncio
import traceback
import asyncio
import logging
import re
import json

from nextcord.ext import commands
from nextcord.ext.commands import has_permissions, MissingPermissions
from nextcord.utils import get
from nextcord import FFmpegPCMAudio
from nextcord import Interaction
from nextcord import PCMVolumeTransformer
from nextcord import Member
from apikeys import discord_bot_token
from words import bw


############# Intendts #############################################################
intents = intents = nextcord.Intents.default()
intents.members = True
intents.messages = True
intents.guilds = True
intents.message_content = True

############ Trigger ###############################################################
client = commands.Bot(command_prefix="!", intents=intents)
bot = commands.Bot(command_prefix="!", intents=intents)

# Prints in terminal when ready for use
@client.event
async def on_ready():
    await client.change_presence(status=nextcord.Status.online, activity=nextcord.Activity(type = nextcord.ActivityType.listening, name='! commands'))
    print("Ruby is ready for use!")
    print("-------------------------------------------------")

############ Commands ###########################################################

# Greeting Message
@client.slash_command(description="Gives greeting message")
async def hello(Interaction: Interaction):
    await Interaction.response.send_message(f'Hello {Interaction.user.name}, Im Ruby. Nice to meet you!')

# Goodbye Message
@client.slash_command(description="Say goodbye")
async def goodbye(interaction: Interaction):
    await interaction.response.send_message(f'Goodbye {interaction.user.name}, hope you have a great rest of your day!')

# Kick Member
@client.slash_command(description="Kick a member")
@commands.has_permissions(kick_members=True)
async def kick(interaction: Interaction, member: nextcord.Member, reason: str = None):
    await member.kick(reason=reason)
    await interaction.response.send_message(f'User {member} has been kicked.')

# Ban Member
@client.slash_command(description="Ban a member")
@commands.has_permissions(ban_members=True)
async def ban(interaction: nextcord.Interaction, member: nextcord.Member, reason: str = None):
    await interaction.guild.ban(member, reason=reason)
    await interaction.response.send_message(f'User {member} has been banned.')

# Unban Member
@client.slash_command(description="Unban a member")
@commands.has_permissions(ban_members=True)
async def unban(interaction: Interaction, user: nextcord.User):
    await interaction.guild.unban(user)
    await interaction.response.send_message(f'User {user} has been unbanned.')

# Add Role
@client.slash_command(description="Add a role to a member")
@commands.has_permissions(manage_roles=True)
async def add_role(interaction: Interaction, user: nextcord.Member, role: nextcord.Role):
    if role in user.roles:
        await interaction.response.send_message(f"{user.mention} already has the role {role}.")
    else:
        await user.add_roles(role)
        await interaction.response.send_message(f"Added {role} to {user.mention}.")

# Remove Role
@client.slash_command(description="Remove a role from a member")
@commands.has_permissions(manage_roles=True)
async def remove_role(interaction: Interaction, user: nextcord.Member, role: nextcord.Role):
    if role in user.roles:
        await user.remove_roles(role)
        await interaction.response.send_message(f"Removed {role} from {user.mention}.")
    else:
        await interaction.response.send_message(f"{user.mention} does not have the role {role}.")


############### Events ##############################################################
        
# Welcomes user to server in Welcome Channel
@client.event
async def on_member_join(member: nextcord.Member):
    channel = await client.fetch_channel(1198457414207426642)
    await channel.send(f'Welcome to the server {member.mention}! Please read the rules and we will see you around!')

# Profanity Checker
profanity_list = bw  

@client.event
async def on_message(message: nextcord.Message):
    # Skip if the message is from the bot itself
    if message.author == client.user:
        return

    # Check for profanity in the message
    if any(re.search(r"\b" + re.escape(word) + r"\b", message.content.lower()) for word in profanity_list):
        await message.delete()
        await message.channel.send("Message was deleted for community safety.")

    # Important: process commands if no profanity is found
    await client.process_commands(message)
    
############## Reporting Errors ######################################################

@client.event
async def on_command_error(interaction: nextcord.Interaction, error):
    # Missing Permissions
    if isinstance(error, commands.MissingPermissions):
        await interaction.response.send_message("You don't have permission to run this command, please try again later.")

    # Missing Flag Arguments
    elif isinstance(error, commands.MissingFlagArgument):
        await interaction.response.send_message("Please try again, command was not complete.")

    # Missing Role
    elif isinstance(error, commands.MissingRole):
        await interaction.response.send_message("You don't have the role required to use this command.")

    # Bot Missing Permissions
    elif isinstance(error, commands.BotMissingPermissions):
        await interaction.response.send_message("Sorry, can not complete at this time. Ruby is currently missing permissions needed to complete command.")

    # Missing Required Attachment
    elif isinstance(error, commands.MissingRequiredAttachment):
        await interaction.response.send_message("Please try again, command was not complete.")

# Missing Perm for Roles Add
@add_role.error
async def role_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("You do not have permission to run this command.")

# Missing Perm for Roles Remove
@remove_role.error
async def role_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("You do not have permission to run this command.")

################ Logging #############################################################

logger = logging.getLogger('nextcord')
logger.setLevel(logging.DEBUG)
handler = logging.FileHandler(filename='nextcord.log', encoding='utf-8', mode='w')
handler.setFormatter(logging.Formatter('%(asctime)s:%(levelname)s:%(name)s: %(message)s'))
logger.addHandler(handler)



############# Bot Token ##############################################################
client.run(discord_bot_token)
############# END #####################################################################
