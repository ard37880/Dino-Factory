# Ruby/ The Ruby Bot
# Made by: Andrew Davis
# 01/25/2024
'''   
Any code not in use comment out like this so we can save it for reactivation per server
'''   

############# Imports ###############################################################
import discord
import requests
import nacl
import asyncio
import traceback
import asyncio
import logging
import re
import json

from discord.ext import commands
from discord.ext.commands import has_permissions, MissingPermissions
from discord.utils import get
from discord import FFmpegPCMAudio
from discord import PCMVolumeTransformer
from discord import Member
from apikeys import discord_bot_token
from words import bw


############# Intendts #############################################################
intents = intents = discord.Intents(value=8)
intents.members = True
intents.messages = True
intents.guilds = True
intents.message_content = True

############ Trigger ###############################################################
client = commands.Bot(command_prefix="!", intents=intents)
bot = commands.Bot(command_prefix="!", intents=intents)

# Prints in terminal when ready for use
@client.event
async def on_ready():
    await client.change_presence(status=discord.Status.online, activity=discord.Activity(type = discord.ActivityType.listening, name='! commands'))
    print("Ruby is ready for use!")
    print("-------------------------------------------------")

############ Commands #############################################################
# Hello when prompt 
@client.command()
async def hello(ctx):
    await ctx.send(f'Hello {ctx.author.name}, Im Ruby. Nice to meet you!')

# Goodbye when prompt
@client.command()
async def goodbye(ctx):
    await ctx.send(f'Goodbye {ctx.author.name}, hope you have a great rest of your day!')

# Kicks Member
@client.command()
@has_permissions(kick_members=True)
async def kick(ctx, member: discord.Member, *, reason=None):
    await member.kick(reason=reason)
    await ctx.send(f'User {member} has been kicked.')

@kick.error
async def kick_error(ctx, error):
    if isinstance(error, MissingPermissions):
        await ctx.send("You don't have permission to kick people!")

# Bans Member
@client.command()
@has_permissions(ban_members=True)
async def ban(ctx, member: discord.Member, *, reason=None):
    await member.ban(reason=reason)
    await ctx.send(f'User {member} has been banned.')

@ban.error
async def ban_error(ctx, error):
    if isinstance(error, MissingPermissions):
        await ctx.send("You don't have permission to ban people!")

# Unban Member
@client.command()
@has_permissions(ban_members=True)
async def unban(ctx, *, user: discord.User):
    await ctx.guild.unban(user)
    await ctx.send(f'User {user} has been unbanned.')

@unban.error
async def unban_error(ctx, error):
    if isinstance(error, MissingPermissions):
        await ctx.send("You don't have permission to unban people!")

# Add Roles
@client.command()
@commands.has_permissions(manage_roles=True)
async def addRole(ctx, user: discord.Member, *, role: discord.Role):
    if role in user.roles:
        await ctx.send(f"{user.mention} already has the role {role}.")
    else:
        await user.add_roles(role)
        await ctx.send(f"Added {role} to {user.mention}.")

# Remove Roles
@client.command()
@commands.has_permissions(manage_roles=True)
async def removeRole(ctx, user: discord.Member, *, role: discord.Role):
    if role in user.roles:
        await user.remove_roles(role)
        await ctx.send(f"Removed {role} from {user.mention}.")
    else:
        await ctx.send(f"{user.mention} does not have the role {role}.")


############### Events ##############################################################

# Welcomes user to server in Welcome Channel  
@client.event
async def on_member_join(member):
    channel = client.get_channel(1198457414207426642)
    await channel.send(f'Welcome to the server {member}! Please read the rules and we will see you around!')

# Profanity Checker
profanity_list = bw

@client.event
async def on_message(message):
    # Skip if the message is from the bot itself
    if message.author == client.user:
        return

    # Check for profanity in the message
    if any(re.search(r"\b" + re.escape(word) + r"\b", message.content.lower()) for word in profanity_list):
        await message.delete()
        await message.channel.send("Message was deleted for community safety.")

    # Important: process commands if no profanity is found
    await client.process_commands(message)

############## Reporting Errors ######################################################

@client.event
async def on_command_error(ctx, error):
    # Missing Permissions
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("You don't have permission to run this command, please try again later.")

    # Missing Flag Arguments
    elif isinstance(error, commands.MissingFlagArgument):
        await ctx.send("Please try again, command was not complete.")

    # Missing Role
    elif isinstance(error, commands.MissingRole):
        await ctx.send("You don't have the role required to use this command.")

    # Bot Missing Permissions
    elif isinstance(error, commands.BotMissingPermissions):
        await ctx.send("Sorry, can not complete at this time. Ruby is currently missing permissions needed to complete command.")

    # Missing Required Attachment
    elif isinstance(error, commands.MissingRequiredAttachment):
        await ctx.send("Please try again, command was not complete.")

# Missing Perm for Roles Add
@addRole.error
async def role_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("You do not have permission to run this command.")

# Missing Perm for Roles Remove
@removeRole.error
async def role_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("You do not have permission to run this command.")

################ Logging #############################################################

logger = logging.getLogger('discord')
logger.setLevel(logging.DEBUG)
handler = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')
handler.setFormatter(logging.Formatter('%(asctime)s:%(levelname)s:%(name)s: %(message)s'))
logger.addHandler(handler)



############# Bot Token ##############################################################
client.run(discord_bot_token)
############# END #####################################################################
