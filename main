# Ruby/ The Ruby Bot
# Made by: Andrew Davis
# 01/25/2024
'''   
Any code not in use comment out like this so we can save it for reactivation per server
'''   

############# Imports ###############################################################
import discord
import requests
import nacl
import asyncio
import traceback
import asyncio
import logging
import re

from discord.ext import commands
from discord import FFmpegPCMAudio
from discord import PCMVolumeTransformer
from apikeys import discord_bot_token
from discord.ext import commands
from words import bw

############# Intendts #############################################################
intents = intents = discord.Intents(value=8)
intents.members = True
intents.messages = True
intents.guilds = True
intents.message_content = True

############ Trigger ###############################################################
client = commands.Bot(command_prefix="!", intents=intents)
bot = commands.Bot(command_prefix="!", intents=intents)

# When Start up Bot
@client.event
async def on_ready():
    print("Dino Factory is ready for use!")
    print("-------------------------------------------------")

############ Commands #############################################################
# Hello when prompt 
@client.command()
async def hello(ctx):
    await ctx.send("Hello, you've reached Ruby. Nice to meet you!")

# Goodbye when prompt
@client.command()
async def goodbye(ctx):
    await ctx.send("Goodbye, hope you have a great rest of your day!")

# Joining Voice Channel needs work currently in-progress and not supported


############### Events ##############################################################

# Welcomes user to server in Welcome Channel
   
@client.event
async def on_member_join(member):
    channel = client.get_channel(1198457414207426642)
    await channel.send("Welcome to the server! Please read the rules and we will see you around!")
  

# Sends alert to Logs Channel when someone left
  
@client.event
async def on_member_remove(member):
    channel = client.get_channel(1198457414207426642)
    await channel.send("Goodbye, thank you for stopping in!")

# Checks for Key Words

@client.event
async def on_message(message):

    if message.content == "4701 staggerbursh rd":
        await message.delete()
        await message.channel.send("Message was deleted for community safty.")
        
@client.event
async def on_ready():
    print("Dino Factory is ready for use!")
    print("-------------------------------------------------")

# Profanity Checker
profanity_list = bw

@client.event
async def on_message(message):
    # Skip if the message is from the bot itself
    if message.author == client.user:
        return

    # Check for profanity in the message
    if any(re.search(r"\b" + re.escape(word) + r"\b", message.content.lower()) for word in profanity_list):
        await message.delete()
        await message.channel.send("Message was deleted for community safety.")

    # Important: process commands if no profanity is found
    await client.process_commands(message)


################ Logging #############################################################

logger = logging.getLogger('discord')
logger.setLevel(logging.DEBUG)
handler = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')
handler.setFormatter(logging.Formatter('%(asctime)s:%(levelname)s:%(name)s: %(message)s'))
logger.addHandler(handler)



############# Bot Token ##############################################################
client.run(discord_bot_token)
############# END#####################################################################
