# Ruby/ The Ruby Bot
# Made by: Andrew Davis
# 01/25/2024

############# Imports #################################################################
import nextcord
import requests
import nacl
import asyncio
import traceback
import asyncio
import logging
import re
import json
import datetime

from nextcord.ext import commands, tasks
from nextcord.ext.commands import has_permissions, MissingPermissions
from nextcord.utils import get
from nextcord.ui import Select, View, Button
from nextcord import FFmpegPCMAudio
from nextcord import Interaction
from nextcord import PCMVolumeTransformer
from nextcord import Member
from apikeys import discord_bot_token
from words import bw

############# Intendts #############################################################

intents = intents = nextcord.Intents.default()
intents.guilds = True
intents.guild_typing = True
intents.guild_messages = True
intents.guild_reactions = True
intents.members = True
intents.messages = True
intents.message_content = True
intents.presences = True

client = commands.Bot(command_prefix='!', intents=nextcord.Intents.all())
bot = commands.Bot(command_prefix="!", intents=nextcord.Intents.all())

############ Classes #################################################################

class Help(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout = None)
        self.value = None

    @nextcord.ui.button(label="Support", style=nextcord.ButtonStyle.blurple)
    async def support_button(self, button: nextcord.ui.Button, interaction: Interaction):
        await interaction.response.send_message(f"Hi {interaction.user.name}, need support or have a request? Open a ticket here: https://discord.gg/ha52CUnYx5", ephemeral=True)
        self.value = True
        self.stop()

class Donate(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout = None)
        self.value = None

    @nextcord.ui.button(label="Donate", style=nextcord.ButtonStyle.green)
    async def donate_button(self, button: nextcord.ui.Button, interaction: Interaction):
        await interaction.response.send_message(f"Thank you {interaction.user.name} for wanting to support us! -Ruby Dev Team ❤️. Our Ko-Fi: https://ko-fi.com/eprotocol", ephemeral=True)
        self.value = True
        self.stop()

class Github(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout = None)
        self.value = None

    @nextcord.ui.button(label="Github", style=nextcord.ButtonStyle.red)
    async def github_button(self, button: nextcord.ui.Button, interaction: Interaction):
        await interaction.response.send_message("Want to see more of our work? Find all of our bots and work here: https://github.com/ard37880", ephemeral=True)
        self.value = True
        self.stop()

############# Start Up #############################################################
        
@client.event
async def on_ready():
    await client.change_presence(status=nextcord.Status.online, activity=nextcord.Activity(type = nextcord.ActivityType.listening, name='for / commands'))
    print("Ruby is ready for use!")
    print("-------------------------------------------------")

############ Commands ###########################################################

# Github Button
@client.slash_command(description="Our Github")
async def github(Interaction: Interaction):
    view = Github()
    await Interaction.response.send_message("Please click the button to continue:", view=view)
    await view.wait()

# About Button
@client.slash_command(description="Help")
async def support(Interaction: Interaction):
    view = Help()
    await Interaction.response.send_message("Please click the button to continue:", view=view)
    await view.wait()

# Donate Button
@client.slash_command(description="Donate")
async def donate(Interaction: Interaction):
    view = Donate()
    await Interaction.response.send_message("Please click the button to continue:", view=view)
    await view.wait()

# Greeting Message
@client.slash_command(description="Gives greeting message")
async def hello(Interaction: Interaction):
    await Interaction.response.send_message(f'Hello {Interaction.user.name}, Im Ruby. Nice to meet you!')

# Goodbye Message
@client.slash_command(description="Say goodbye")
async def goodbye(interaction: Interaction):
    await interaction.response.send_message(f'Goodbye {interaction.user.name}, hope you have a great rest of your day!')

# Kick Member
@client.slash_command(description="Kick a member")
@commands.has_permissions(kick_members=True)
async def kick(interaction: Interaction, member: nextcord.Member, reason: str = None):
    await member.kick(reason=reason)
    await interaction.response.send_message(f'User {member} has been kicked.')

# Ban Member
@client.slash_command(description="Ban a member")
@commands.has_permissions(ban_members=True)
async def ban(interaction: nextcord.Interaction, member: nextcord.Member, reason: str = None):
    await interaction.guild.ban(member, reason=reason)
    await interaction.response.send_message(f'User {member} has been banned.')

# Unban Member
@client.slash_command(description="Unban a member")
@commands.has_permissions(ban_members=True)
async def unban(interaction: Interaction, user: nextcord.User):
    await interaction.guild.unban(user)
    await interaction.response.send_message(f'User {user} has been unbanned.')

# Add Role
@client.slash_command(description="Add a role to a member")
@commands.has_permissions(manage_roles=True)
async def add_role(interaction: Interaction, user: nextcord.Member, role: nextcord.Role):
    if role in user.roles:
        await interaction.response.send_message(f"{user.mention} already has the role {role}.")
    else:
        await user.add_roles(role)
        await interaction.response.send_message(f"Added {role} to {user.mention}.")

# Remove Role
@client.slash_command(description="Remove a role from a member")
@commands.has_permissions(manage_roles=True)
async def remove_role(interaction: Interaction, user: nextcord.Member, role: nextcord.Role):
    if role in user.roles:
        await user.remove_roles(role)
        await interaction.response.send_message(f"Removed {role} from {user.mention}.")
    else:
        await interaction.response.send_message(f"{user.mention} does not have the role {role}.")

# Toggles on and off Profanity Filter
@client.slash_command(name="profanity_filter", description="Toggle the profanity filter on or off")
async def toggle_profanity_filter(interaction: nextcord.Interaction):
    global profanity_filter_on
    profanity_filter_on = not profanity_filter_on
    status = "enabled" if profanity_filter_on else "disabled"
    await interaction.response.send_message(f"Profanity filter is now {status}.", ephemeral=True)

# Add/ Remove words from list
WORDS_FILE_PATH = r"YOUR\PATH\TO\WORDS.PY"

def read_words_from_file():
    with open(WORDS_FILE_PATH, "r", encoding='utf-8') as file:
        content = file.read()
        words = eval(content.split('=')[1].strip())
    return words

def write_words_to_file(words):
    with open(WORDS_FILE_PATH, "w", encoding='utf-8') as file:
        file.write(f"words = {words}")

@client.slash_command(name="add_word", description="Add a word to words.py")
async def add_word(interaction: nextcord.Interaction, word: str):
    words = read_words_from_file()
    if word not in words:
        words.append(word)
        write_words_to_file(words)
        await interaction.response.send_message(f"Added word `{word}` to words.py.")
    else:
        await interaction.response.send_message(f"Word `{word}` already exists in words.py.")

@client.slash_command(name="remove_word", description="Remove a word from words.py")
async def remove_word(interaction: nextcord.Interaction, word: str):
    words = read_words_from_file()
    if word in words:
        words.remove(word)
        write_words_to_file(words)
        await interaction.response.send_message(f"Removed word `{word}` from words.py.")
    else:
        await interaction.response.send_message(f"Word `{word}` not found in words.py.")

############### Events ##############################################################

# Welcome to Channel
@client.event
async def on_member_join(member: nextcord.Member):
    channel = await client.fetch_channel(YOUR_WELCOME_CHANNEL_ID)
    await channel.send(f'Welcome to the server {member.mention}! Please read https://discord.com/channels/1201278421821558864/1201442000478679141 and we will see you around!')

# Auto assigns role
@client.event
async def on_member_join(member):
    role_names = ["YOUR_ROLE_NAME"] 
    assigned_roles = []

    for role_name in role_names:
        role = nextcord.utils.get(member.guild.roles, name=role_name)
        if role:
            await member.add_roles(role)
            assigned_roles.append(role_name)
            print(f"Assigned {role_name} to {member.display_name}")
        else:
            print(f"Role {role_name} not found")

    if assigned_roles:
        print(f"Successfully assigned roles: {', '.join(assigned_roles)} to {member.display_name}")
    else:
        print("No roles were assigned.")

# Profanity Checker
profanity_list = words 
profanity_filter_on = True

profanity_pattern = re.compile("|".join(r"\b" + re.escape(word) + r"\b" for word in profanity_list), re.IGNORECASE)

@client.event
async def on_message(message: nextcord.Message):
    global profanity_filter_on

    if message.author == client.user:
        return

    if profanity_filter_on and profanity_pattern.search(message.content):
        await message.delete()
        await message.channel.send("Message was deleted for community safety.")
        return

    await client.process_commands(message)

@client.command()
async def toggle_profanity_filter(ctx):
    global profanity_filter_on
    profanity_filter_on = not profanity_filter_on 
    status = "on" if profanity_filter_on else "off"
    await ctx.send(f"Profanity filter is now {status}.")
    
############## Reporting Errors ######################################################

@client.event
async def on_command_error(interaction: nextcord.Interaction, error):
    # Missing Permissions
    if isinstance(error, commands.MissingPermissions):
        await interaction.response.send_message("You don't have permission to run this command, please try again later.")

    # Missing Flag Arguments
    elif isinstance(error, commands.MissingFlagArgument):
        await interaction.response.send_message("Please try again, command was not complete.")

    # Missing Role
    elif isinstance(error, commands.MissingRole):
        await interaction.response.send_message("You don't have the role required to use this command.")

    # Bot Missing Permissions
    elif isinstance(error, commands.BotMissingPermissions):
        await interaction.response.send_message("Sorry, can not complete at this time. Ruby is currently missing permissions needed to complete command.")

    # Missing Required Attachment
    elif isinstance(error, commands.MissingRequiredAttachment):
        await interaction.response.send_message("Please try again, command was not complete.")

# Missing Perm for Roles Add
@add_role.error
async def role_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("You do not have permission to run this command.")

# Missing Perm for Roles Remove
@remove_role.error
async def role_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("You do not have permission to run this command.")

################ Logging #############################################################

logger = logging.getLogger('nextcord')
logger.setLevel(logging.DEBUG)
handler = logging.FileHandler(filename='nextcord.log', encoding='utf-8', mode='w')
handler.setFormatter(logging.Formatter('%(asctime)s:%(levelname)s:%(name)s: %(message)s'))
logger.addHandler(handler)



############# Bot Token ##############################################################
client.run(discord_bot_token)
############# END #####################################################################
